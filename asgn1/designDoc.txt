
	Design Doc Assignment 1 -- CMPS 111 -- 2019

Files:
 --------------------------------------------------------------------

    designDoc.txt    argshell.c    shell.l    Makefile    README



Sources:
 --------------------------------------------------------------------
 Many parts of this program are common methods, such as open(),
 close(), execvp() and so forth. The man pages were consulted but
 proved difficult to decipher. geeksforgeeks.com and stackoverflow
 were extensively utilized as resources to resolve syntactical issues
 and common functionalities like how to open a file. Sections of my
 code that non-trivial and relied on resources like stackoverflow are
 marked with the URL to the appropriate post. There are few instances
 of this. All other code sections are of my own design or considered
 too general to bother directing the reader to a specific post on
 geeksforgeeks that explains it (i.e., how to read from a pipe).

 

Program Description:
 --------------------------------------------------------------------
 This program immitates a typical shell. The following functionality
 is supported:
 
 - exit : exits the shell.
 
 - command with argumens:
   	   ex. ls -l -a.

 - command with stdin  redirection from a file:
   	   ex. sort < filename

 - command with stdout redirection to a file.
   	   ex. ls > outfile redirectes stdout to outfile, overwriting
	       the file if it exists, and creating the file if it
	       does not.
	   ex. ls >> outfile redirects stdout to outfile, appending
	       to the file if it exists, and creating the file if it
	       does not.

 - command with stderr redirection to a file.
   	   ex. ./program >& outfile redirects stdout and stderr to
	       outfile, overwriting the file if it exists, and
	       creating the file if it does not.
	   ex. ./program >>& outfile redirects stdout and stderr to
	       outfile, appending to the file if it exists, and
	       creating the file if it does not.

 - pipe commands together:
   	ex. cat shakespeare.txt | head -9

 - several commands piped together:
   	ex. sort < file | more | head -10

 - pipe commands with stderr:
   	ex: ./program |& grep ERROR

 - separate commands with semicolon:
   	ex. ls > file; sort < file > sorted

 - change working directory with cd. Omitting a directory will change
   the working directory to the directory in which the shell was
   launched.
	ex: cd dir changes the working directory to dir. 
      	ex: cd ..  changes the working directory to the current
	    directories parent directory.
	ex: cd     changes the working directory to the directory in
	    which the shell was called.


General design / modularity
 --------------------------------------------------------------------
 Disclaimer: This is a high-level view of the programs design. For
 documentation on each function see code base. Every function has a
 documentation block, and code is moderately commented inside of the
 function.
 
 The most significant concept of this program is that of leveraging
 forks to isolate processes from one another. I refer to this
 notion of isolating processes from each other 'fork isolation'.

 The first challenge overcome by fork isolation was that of calling
 execvp, which replaces a process's image, making it impossible to
 return to the calling position in the code. I resolved this by
 forking a new process to call execvp.

 Fork isolation is used to isolate the effects of redirection. I
 created the function 'isolateRun(args)' to implement redirection
 without impacting the parent process. This is useful to protect
 commands that are later entered by the user  and commands following
 a semicolon from buggy redirection. In the case of semicolons, each
 set of commands are parsed in main() and passed independently as a
 subarray of args to isolateRun(). In this way, commands separated by
 semicolons are indistinguishable to isolateRun() from commands that
 are entered by the user at different times.

 While fork isolation reaped great benefits of isolating all actions
 from the parent process, this proved to be an obstacle in the
 implementation of 'cd', which could not be isolated from the parent
 process and main loop.

 I had to implement chdir in the main loop in a way similar to how I
 parse through semicolons, and fiddle with the args array and i so
 that the main for loop that parsed all of the user's input would
 progress past cd.

 Fork isolation and recursion were frustrating, complex, and
 absolutely necessary to support piping between processes. I will try
 to draw out a diagram of piping between processes as it is
 implemented in my program.

    Time progresses vertically downward. fork names are referred to
    	 by names in brackets [<fork name>]. 

    Parent process --forks--> isolateRun() [referred to as isoRun]
    	   isolateRun() parses arguments to set up redirection.
	   upon reaching '|':
	   
	     |
	     |
	     |
   [isoRun] forks
	     |--------forks [pid 1]----------->|
	     |				       |
	     V				       V
    [isoRun] redirects stdout	      [pid1] redirects stdin
    [isoRun] redirects stderr	  	       |
    	     if necessary		       |
    pipe(stdout->pipe[1])		       |
	     |				       V
	     |	     	        [pid1] recurs into isolateRun()
	     |		   with args being everything after the pipe.
	     |		      On this line there could be an entire
	     |		    diagram similar to this one. This diagram
	     |		     could be a recurrence of other diagrams.
	     |		       Man, recursion is crazy, huh?
	     V				       |
      [isoRun] forks			       |
   	     |-----forks [pid2]---|	       |
	     |			  |	       |
	     |			  V	       |
	     |		[pid2] executes the    |
	     |	      command before the pipe, |
	     |	      redirecting stdout->pipe |
	     |	        for [pid1] to read     |
             |		    	  |   	       |
	     |			  |	       |
	     V			  |	       |
   [isoRun] waits for [pid2]	  |	       |
   	     | <------------------|	       |
	     V				       |
   [isoRun] closes writing		       |
       end of pipe			       |
       	     |				       |
	     |				       |	
	     V				       |
   [isoRun] waits for [pid1]	     	       |
   	     | <-------------------------------|
	     |
     [isoRun] returns

 Creating the isolateRun() function was advantageous in this instanc
 because it simplified progressing from a single pipe to multiple
 pipes. Simply recurring on isolateRun() in a fork isolated later
 redirections from the earlier pipe redirections. Furthermore, the
 instance of isolateRun() used the pipe of the parent process for
 input while isolating its own pipe.

That's my program! I hope it wasn't too boring a read (although I'm
sure all of these submissions become pretty boring to read after a while),
and I hope the diagram isn't too difficult to understand.

Good luck with the rest of the submissions!  
